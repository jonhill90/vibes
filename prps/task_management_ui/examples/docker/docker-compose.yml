# Source: /Users/jon/source/vibes/repos/Archon/docker-compose.yml
# Pattern: Multi-service Docker Compose with health checks
# Extracted: 2025-10-06
# Relevance: 8/10 - Deployment pattern reference

# PATTERN: Docker Compose with Profiles
# - Default profile: Starts server, mcp, frontend
# - Optional profiles: Use --profile agents to start additional services
# Usage:
#   docker compose up                        # Starts core services
#   docker compose --profile agents up -d    # Also starts agents service

services:
  # PATTERN: FastAPI Backend Service
  archon-server:
    build:
      context: ./python
      dockerfile: Dockerfile.server
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_SERVER_PORT: ${ARCHON_SERVER_PORT:-8181}
    container_name: archon-server
    ports:
      - "${ARCHON_SERVER_PORT:-8181}:${ARCHON_SERVER_PORT:-8181}"
    environment:
      # CRITICAL: Database connection
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      # Optional integrations
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      # Service discovery for inter-service communication
      - SERVICE_DISCOVERY_MODE=docker_compose
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Port configuration
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_AGENTS_PORT=${ARCHON_AGENTS_PORT:-8052}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
      - ARCHON_HOST=${HOST:-localhost}
    networks:
      - app-network
    volumes:
      # PATTERN: Hot reload in development
      - ./python/src:/app/src # Mount source code
      - ./python/tests:/app/tests # Mount tests
      - ./migration:/app/migration # Migration files
    extra_hosts:
      - "host.docker.internal:host-gateway" # Access host services
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "src.server.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "${ARCHON_SERVER_PORT:-8181}",
        "--reload", # Hot reload for development
      ]
    # PATTERN: Health check for startup ordering
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import urllib.request; urllib.request.urlopen(''http://localhost:${ARCHON_SERVER_PORT:-8181}/health'')"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PATTERN: MCP Server Service (Lightweight HTTP-based)
  archon-mcp:
    build:
      context: ./python
      dockerfile: Dockerfile.mcp
      args:
        BUILDKIT_INLINE_CACHE: 1
        ARCHON_MCP_PORT: ${ARCHON_MCP_PORT:-8051}
    container_name: archon-mcp
    ports:
      - "${ARCHON_MCP_PORT:-8051}:${ARCHON_MCP_PORT:-8051}"
    environment:
      # Database connection
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN:-}
      - SERVICE_DISCOVERY_MODE=docker_compose
      - TRANSPORT=sse # Server-Sent Events for MCP
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # MCP needs to know where to find other services
      - API_SERVICE_URL=http://archon-server:${ARCHON_SERVER_PORT:-8181}
      - AGENTS_ENABLED=${AGENTS_ENABLED:-false}
      - AGENTS_SERVICE_URL=${AGENTS_SERVICE_URL:-http://archon-agents:${ARCHON_AGENTS_PORT:-8052}}
      - ARCHON_MCP_PORT=${ARCHON_MCP_PORT:-8051}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
    networks:
      - app-network
    # PATTERN: Dependency with health check
    depends_on:
      archon-server:
        condition: service_healthy # Wait for server to be ready
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          'python -c "import socket; s=socket.socket(); s.connect((''localhost'', ${ARCHON_MCP_PORT:-8051})); s.close()"',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Give dependencies time to start

  # PATTERN: React Frontend Service
  archon-frontend:
    build: ./archon-ui-main
    container_name: archon-ui
    ports:
      - "${ARCHON_UI_PORT:-3737}:3737"
    environment:
      # CRITICAL: Use relative URLs through Vite proxy
      # Don't set VITE_API_URL so frontend uses proxy
      - VITE_ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - ARCHON_SERVER_PORT=${ARCHON_SERVER_PORT:-8181}
      - HOST=${HOST:-localhost}
      - PROD=${PROD:-false}
      - VITE_ALLOWED_HOSTS=${VITE_ALLOWED_HOSTS:-}
      - VITE_SHOW_DEVTOOLS=${VITE_SHOW_DEVTOOLS:-false}
      - DOCKER_ENV=true
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3737"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      # PATTERN: Hot reload for frontend
      - ./archon-ui-main/src:/app/src
      - ./archon-ui-main/public:/app/public
    depends_on:
      archon-server:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

# WHAT TO MIMIC:
#
# 1. Service Dependencies:
#    - Use depends_on with condition: service_healthy
#    - Health checks ensure services start in order
#    - Give adequate start_period for initialization
#
# 2. Environment Variables:
#    - Use .env file with fallback defaults (${VAR:-default})
#    - Separate concerns: database, logging, service discovery
#    - Pass port configuration consistently
#
# 3. Volume Mounts:
#    - Mount source code for hot reload in dev
#    - Separate mount for tests if needed
#    - Migration files for schema tracking
#
# 4. Networking:
#    - Use custom bridge network for inter-service communication
#    - Services can reference each other by container name
#    - extra_hosts for host.docker.internal access
#
# 5. Health Checks:
#    - HTTP check for web services
#    - Socket check for raw TCP services
#    - Appropriate intervals and retries
#
# WHAT TO ADAPT:
#
# - Service names: Replace archon-* with your project name
# - Ports: Adjust to your preferred port numbers
# - Build contexts: Point to your directory structure
# - Environment variables: Add your specific config
#
# WHAT TO SKIP:
#
# - Profile-based services (agents) if not needed
# - Logging integrations (LOGFIRE_TOKEN)
# - Service discovery if using simple networking
