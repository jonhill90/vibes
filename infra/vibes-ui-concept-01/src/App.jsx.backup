import { useState } from 'react'
import { 
  Code, 
  PenTool, 
  Search, 
  Settings, 
  BookOpen, 
  Rocket,
  Paperclip,
  Link,
  Send,
  Monitor,
  Users,
  Minimize2
} from 'lucide-react'
import { Button } from '@/components/ui/button.jsx'
import './App.css'

function App() {
  const [activeAgent, setActiveAgent] = useState('coding')
  const [message, setMessage] = useState('')
  const [isScreenShare, setIsScreenShare] = useState(false)
  const [messages, setMessages] = useState([
    { id: 1, user: 'User', text: 'Hey', timestamp: '2:30 PM' },
    { id: 2, user: 'Agent', text: 'Working on your request...', timestamp: '2:31 PM' },
    { id: 3, user: 'User', text: 'Looks good!', timestamp: '2:32 PM' },
  ])

  const agents = [
    { id: 'coding', icon: Code, name: 'Coding Agent', color: 'bg-blue-500', status: 'active' },
    { id: 'writing', icon: PenTool, name: 'Writing Agent', color: 'bg-green-500', status: 'idle' },
    { id: 'research', icon: Search, name: 'Research Agent', color: 'bg-purple-500', status: 'busy' },
    { id: 'deploy', icon: Rocket, name: 'Deploy Agent', color: 'bg-orange-500', status: 'idle' },
  ]

  const handleSendMessage = () => {
    if (message.trim()) {
      const newMessage = {
        id: messages.length + 1,
        user: 'User',
        text: message,
        timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      }
      setMessages([...messages, newMessage])
      setMessage('')
      
      // Simulate agent response
      setTimeout(() => {
        const agentResponse = {
          id: messages.length + 2,
          user: 'Agent',
          text: 'I understand. Let me help you with that.',
          timestamp: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
        }
        setMessages(prev => [...prev, agentResponse])
      }, 1000)
    }
  }

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Discord-like Sidebar */}
      <div className="w-20 bg-gray-800 flex flex-col items-center py-4 space-y-4">
        {/* Agent Icons */}
        {agents.map((agent) => {
          const IconComponent = agent.icon
          return (
            <div
              key={agent.id}
              className={`agent-icon w-12 h-12 rounded-2xl flex items-center justify-center cursor-pointer transition-all duration-200 hover:rounded-xl ${
                activeAgent === agent.id 
                  ? `${agent.color} rounded-xl` 
                  : 'bg-gray-700 hover:bg-gray-600'
              }`}
              onClick={() => setActiveAgent(agent.id)}
            >
              <IconComponent size={24} className="text-white" />
              <div className={`agent-status ${agent.status}`}></div>
            </div>
          )
        })}
        
        {/* Separator */}
        <div className="w-8 h-0.5 bg-gray-600 rounded"></div>
        
        {/* Knowledge Base */}
        <div className="w-12 h-12 rounded-2xl bg-gray-700 hover:bg-gray-600 hover:rounded-xl flex items-center justify-center cursor-pointer transition-all duration-200">
          <BookOpen size={24} className="text-white" />
        </div>
        
        {/* Settings */}
        <div className="w-12 h-12 rounded-2xl bg-gray-700 hover:bg-gray-600 hover:rounded-xl flex items-center justify-center cursor-pointer transition-all duration-200 mt-auto">
          <Settings size={24} className="text-white" />
        </div>
      </div>

      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <div className="h-16 bg-gray-800 border-b border-gray-700 flex items-center justify-between px-6">
          <div className="flex items-center space-x-3">
            <div className={`w-8 h-8 rounded-lg ${agents.find(a => a.id === activeAgent)?.color} flex items-center justify-center`}>
              {(() => {
                const agent = agents.find(a => a.id === activeAgent)
                const IconComponent = agent?.icon
                return IconComponent ? <IconComponent size={16} className="text-white" /> : null
              })()}
            </div>
            <h1 className="text-xl font-semibold">
              {agents.find(a => a.id === activeAgent)?.name || 'Conversational Development Environment'}
            </h1>
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsScreenShare(!isScreenShare)}
              className="text-gray-300 hover:text-white"
            >
              <Monitor size={16} className="mr-2" />
              {isScreenShare ? 'Exit Screen Share' : 'Screen Share'}
            </Button>
            <Button variant="ghost" size="sm" className="text-gray-300 hover:text-white">
              <Users size={16} />
            </Button>
          </div>
        </div>

        {/* Content Area */}
        <div className="flex-1 flex">
          {isScreenShare ? (
            /* Screen Share Mode */
            <>
              {/* Agent Screen Share */}
              <div className="flex-1 bg-gray-900 border-r border-gray-700 flex flex-col">
                <div className="h-12 bg-gray-800 border-b border-gray-700 flex items-center px-4">
                  <h3 className="text-sm font-medium text-gray-300">Agent Screen Share</h3>
                  <span className="ml-2 text-xs text-gray-500">(Terminal/Code/Browser)</span>
                </div>
                <div className="flex-1 bg-black p-4 font-mono text-green-400 text-sm">
                  <div className="mb-2">$ npm run dev</div>
                  <div className="mb-2">Starting development server...</div>
                  <div className="mb-2">✓ Local: http://localhost:3000</div>
                  <div className="mb-2">✓ Network: http://192.168.1.100:3000</div>
                  <div className="animate-pulse">█</div>
                </div>
              </div>
              
              {/* Chat Panel */}
              <div className="w-80 bg-gray-800 flex flex-col">
                <div className="h-12 bg-gray-700 border-b border-gray-600 flex items-center px-4">
                  <h3 className="text-sm font-medium">Agent Chat</h3>
                </div>
                <div className="flex-1 overflow-y-auto p-4 space-y-3">
                  {messages.map((msg) => (
                    <div key={msg.id} className="flex flex-col">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className={`text-sm font-medium ${
                          msg.user === 'User' ? 'text-blue-400' : 'text-green-400'
                        }`}>
                          {msg.user}:
                        </span>
                        <span className="text-xs text-gray-500">{msg.timestamp}</span>
                      </div>
                      <div className="text-sm text-gray-200">{msg.text}</div>
                    </div>
                  ))}
                </div>
                <div className="p-4 border-t border-gray-600">
                  <div className="flex space-x-2">
                    <input
                      type="text"
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      placeholder="Type..."
                      className="flex-1 bg-gray-700 border border-gray-600 rounded px-3 py-2 text-sm text-white placeholder-gray-400 focus:outline-none focus:border-blue-500"
                    />
                    <Button onClick={handleSendMessage} size="sm" className="bg-blue-600 hover:bg-blue-700">
                      <Send size={16} />
                    </Button>
                  </div>
                </div>
              </div>
            </>
          ) : (
            /* Normal Chat Mode */
            <div className="flex-1 flex flex-col">
              {/* Chat Messages Area */}
              <div className="flex-1 overflow-y-auto p-6">
                <div className="max-w-4xl mx-auto">
                  <div className="text-center mb-8">
                    <h2 className="text-3xl font-bold mb-2">Main Chat Area</h2>
                    <p className="text-gray-400">Start a conversation with your AI agents</p>
                  </div>
                  
                  {/* Twitch-like Chat Messages */}
                  <div className="space-y-4">
                    {messages.map((msg) => (
                      <div key={msg.id} className="flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-800 transition-colors">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-bold ${
                          msg.user === 'User' ? 'bg-blue-600' : 'bg-green-600'
                        }`}>
                          {msg.user[0]}
                        </div>
                        <div className="flex-1">
                          <div className="flex items-center space-x-2 mb-1">
                            <span className={`font-medium ${
                              msg.user === 'User' ? 'text-blue-400' : 'text-green-400'
                            }`}>
                              {msg.user}
                            </span>
                            <span className="text-xs text-gray-500">{msg.timestamp}</span>
                          </div>
                          <div className="text-gray-200">{msg.text}</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              {/* Message Input */}
              <div className="border-t border-gray-700 p-6">
                <div className="max-w-4xl mx-auto">
                  <div className="flex items-center space-x-3 bg-gray-800 rounded-lg p-3">
                    <input
                      type="text"
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                      placeholder="Type message..."
                      className="flex-1 bg-transparent text-white placeholder-gray-400 focus:outline-none"
                    />
                    <div className="flex items-center space-x-2">
                      <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                        <Paperclip size={16} />
                      </Button>
                      <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                        <Link size={16} />
                      </Button>
                      <Button onClick={handleSendMessage} size="sm" className="bg-blue-600 hover:bg-blue-700">
                        <Rocket size={16} />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

export default App

