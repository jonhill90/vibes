# Docker Compose Configuration for RAG Service
# Version: 1.0.0
#
# Services:
# - postgres: PostgreSQL 15 with pgvector extension
# - qdrant: Qdrant vector database
# - backend: FastAPI backend service
# - frontend: Vite React development server
#
# Usage:
#   docker compose up -d              # Start all services
#   docker compose ps                 # Check service health
#   docker compose logs -f backend    # View backend logs
#   docker compose down               # Stop all services
#   docker compose down -v            # Stop and remove volumes

version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    ports:
      - "${POSTGRES_PORT:-5433}:5432"  # Offset port to avoid conflict with task-manager
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rag_service}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-rag_service}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Qdrant Vector Database Service
  qdrant:
    image: qdrant/qdrant:latest
    container_name: rag-qdrant
    ports:
      - "${QDRANT_REST_PORT:-6333}:6333"  # REST API
      - "${QDRANT_GRPC_PORT:-6334}:6334"  # gRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - rag-network
    # Healthcheck disabled - Qdrant container lacks wget/curl
    # Service is healthy when it starts (verified by logs)
    restart: unless-stopped

  # FastAPI Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag-backend
    ports:
      - "${API_PORT:-8003}:8003"  # Offset port to avoid conflict with task-manager
      - "${MCP_PORT:-8004}:8004"  # MCP HTTP server port
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-rag_service}
      DATABASE_POOL_MIN_SIZE: ${DATABASE_POOL_MIN_SIZE:-10}
      DATABASE_POOL_MAX_SIZE: ${DATABASE_POOL_MAX_SIZE:-20}

      # Qdrant configuration
      QDRANT_URL: http://qdrant:6333
      QDRANT_COLLECTION_NAME: ${QDRANT_COLLECTION_NAME:-documents}

      # OpenAI configuration
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_EMBEDDING_MODEL: ${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}

      # Search configuration
      USE_HYBRID_SEARCH: ${USE_HYBRID_SEARCH:-false}
      SIMILARITY_THRESHOLD: ${SIMILARITY_THRESHOLD:-0.05}

      # Service configuration
      API_PORT: ${API_PORT:-8003}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # MCP configuration
      MCP_PORT: ${MCP_PORT:-8004}
      MCP_PAYLOAD_MAX_LENGTH: ${MCP_PAYLOAD_MAX_LENGTH:-1000}
      MCP_PAGINATION_MAX: ${MCP_PAGINATION_MAX:-20}
    volumes:
      # Mount source code for development hot reload
      - ./backend/src:/app/src:ro
      # Mount cache directory for ML models, browsers, and pip packages
      # Persists ~2GB of downloaded content across container restarts
      - ${APP_CACHE_DIR:-./cache}:/root/.cache
    networks:
      - rag-network
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_started  # No healthcheck available for Qdrant
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8003/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # Allow time for dependencies to initialize
    restart: unless-stopped

  # Frontend Development Server (Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag-frontend
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    environment:
      # Empty VITE_API_URL means use default in client.ts (localhost:8003)
      # This works for Mac browsers accessing localhost:5173
      VITE_API_URL: ${VITE_API_URL:-}
      VITE_API_BASE_PATH: ${VITE_API_BASE_PATH:-/api}
    volumes:
      # Mount source code for development hot reload
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
    networks:
      - rag-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    name: rag_postgres_data
    driver: local
  qdrant_data:
    name: rag_qdrant_data
    driver: local

# Network Configuration
networks:
  rag-network:
    name: rag_network
    driver: bridge
